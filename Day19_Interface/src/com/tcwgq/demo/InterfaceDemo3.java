package com.tcwgq.demo;

/**
 * 抽象类与接口的区别： 
 * A:成员区别 
 * 		抽象类： 
 * 			成员变量：可以变量，也可以常量 
 * 			构造方法：有 
 * 			成员方法：可以抽象，也可非抽象 
 * 		接口： 
 * 			成员变量：只可以常量
 * 			构造方法：没有 
 * 			成员方法：只可以抽象 
 * B:关系区别 
 * 		类与类：继承，且只能单继承 
 * 		类与接口：实现，可以单实现，也可多实现，还可继承一个类的同时一或多实现
 * 		接口与接口：继承，可以单继承，也可多继承 
 * C:设计理念的不同 
 * 		抽象类 被继承体现的是：”is a”的关系。继承体系中的共性功能 
 * 		接口 被实现体现的是：”like a”的关系。继承体系中的扩展功能
 * 
 * 网上找的解释：
 * 设计层面上的区别
 * 1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。
 * 举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，
 * 将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行
 * 设计为一个接口Fly，包含方法fly()，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，
 * 对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，继承是一个 "是不是"的关系，而 接口 实现则是
 * "有没有"的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点）
 * ，能飞行则可以实现这个接口，不能飞行就不实现这个接口。
 * 
 * 2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？最简单例子，
 * 大家都用过ppt里面的模板，如果用模板A设计了ppt B和ppt C，ppt B和ppt C公共的部分就是模板A了，如果它们的公共部分需要改动，则只需要改动模板A就可以了，
 * 不需要重新对ppt B和ppt C进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，
 * 可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。
 */
public class InterfaceDemo3 {
	public static void main(String[] args) {

	}
}
